/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.entites.Train;
import org.example.entites.User;
import org.example.services.UserBookingService;
import org.example.utils.UserServiceUtil;

import java.io.IOException;
import java.util.*;

public class App {

    public static void main(String[] args) {

        System.out.println("Running Train Booking System");
        UserBookingService userBookingService = null;

        try {
            userBookingService = new UserBookingService();
        } catch (IOException ex) {
            System.out.println("Error initializing UserBookingService: " + ex.getMessage());
            ex.printStackTrace(); // Optional: Print stack trace for debugging
            return;
        }

        try (Scanner scanner = new Scanner(System.in)) {
            int option = 0;
            while (option != 7) {
                System.out.println("Choose option");
                System.out.println("1. Sign up");
                System.out.println("2. Login");
                System.out.println("3. Fetch Bookings");
                System.out.println("4. Search Trains");
                System.out.println("5. Book a Seat");
                System.out.println("6. Cancel my Booking");
                System.out.println("7. Exit the App");
                option = scanner.nextInt();
                scanner.nextLine(); // Consume newline
                Train trainSelectedForBooking = new Train();

                switch (option) {
                    case 1:
                        System.out.println("Enter your name to SignUp");
                        String nameToSignUp = scanner.nextLine();
                        System.out.println("Enter your password to SignUp");
                        String passwordToSignUp = scanner.nextLine();
                        User userToSignUp = new User(nameToSignUp, passwordToSignUp, UserServiceUtil.hashPassword(passwordToSignUp), new ArrayList<>(), UUID.randomUUID().toString());
                        userBookingService.signUp(userToSignUp);
                        break;

                    case 2 :
                        System.out.println("Enter your name to login");
                        String nameToLogin = scanner.nextLine();
                        System.out.println("Enter your password to login");
                        String passwordToLogin = scanner.nextLine();
                        User userToLogin = new User(nameToLogin , passwordToLogin , UserServiceUtil.hashPassword(passwordToLogin) , new ArrayList<>() , UUID.randomUUID().toString());
                        userBookingService = new UserBookingService(userToLogin);
                        break ;
                    // Other cases for different options

                    case 3 :
                        System.out.println("Your bookings are");
                        userBookingService.fetchBooking();
                        break ;
                    case 4:
                        System.out.println("Enter your Source Station");
                        String source = scanner.nextLine();
                        System.out.println("Enter your Destination Staation");
                        String destination = scanner.nextLine();
//                        train from source to destination will be listed
                        List<Train> trains = userBookingService.getTrain(source , destination);
                        int index = 1;
                        for (Train t: trains){
                            System.out.println(index+" Train id : "+t.getTrainId());
                            for (Map.Entry<String, String> entry: t.getStationTimes().entrySet()){
                                System.out.println("station "+entry.getKey()+" time: "+entry.getValue());
                            }
                        }
                        System.out.println("Select a train by typing 1,2,3...");
                        trainSelectedForBooking = trains.get(scanner.nextInt());
                        break;
                    case 5 :
                        System.out.println("Select a seat out of these seats");
                        List<List<Integer>> seats = userBookingService.fetchSeats(trainSelectedForBooking);
                        for (List<Integer> row: seats){
                            for (Integer val: row){
                                System.out.print(val+" ");
                            }
                            System.out.println();
                        }
                        System.out.println("Select the seat by typing the row and column");
                        System.out.println("Enter the row");
                        int row = scanner.nextInt();
                        System.out.println("Enter the column");
                        int col = scanner.nextInt();
                        System.out.println("Booking your seat....");
                        Boolean booked = userBookingService.bookTrainSeat(trainSelectedForBooking, row, col);
                        if(booked.equals(Boolean.TRUE)){
                            System.out.println("Booked! Enjoy your journey");
                        }else{
                            System.out.println("Can't book this seat");
                        }
                        break;



                    case 7:
                        System.out.println("Exiting the app.");
                        break;
                    default:
                        System.out.println("Invalid option. Please try again.");
                        break;
                }
            }
        } catch (Exception e) {
            System.out.println("An error occurred: " + e.getMessage());
            e.printStackTrace(); // Optional: Print stack trace for debugging
        }
    }
}
